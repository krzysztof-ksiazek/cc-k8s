-   name: Populate galera_nodes group

    hosts: docker
    user: vagrant
    sudo: yes
    gather_facts: true
    serial: 1

    tasks:

    - name: Ensure hostname set
      hostname: name={{ inventory_hostname }}

    - add_host:
        name={{ ansible_eth1['ipv4']['address'] }} groups=k8sip

    - add_host:
        name={{ ansible_hostname }} groups=k8shostname

    - add_host:
        name={{ ansible_fqdn }} groups=k8sfqdn



-   name: Install stuff
    hosts: docker
    user: vagrant
    sudo: yes
    gather_facts: true

    tasks:

    - name: Add key to docker repo
      shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

    - name: Add key for k8s repo
      shell: curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add

    - name: Disable swap
      shell: swapoff -a

    - name: Add k8s repo
      apt_repository:
        repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: 'k8s'

    - name: Add DockerCE repo
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename|lower }} stable
        state: present
        filename: 'docker'

    - name: Install packages
      apt:
        name: "{{ item }}"
        state: present
        force: yes
        update_cache: yes
      environment:
        DEBIAN_FRONTEND: noninteractive
      with_items:
        - docker-ce
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - kubeadm
        - nfs-common



    - name: Configure /etc/hosts
      lineinfile:
        dest=/etc/hosts
        regexp="^{{ groups['k8sip'][item] }}.+$"
        line="{{ groups['k8sip'][item] }} {{ groups['k8shostname'][item] }} {{ groups['k8sfqdn'][item] }}"
      with_items:
        - 0
        - 1
        - 2

#    - meta: end_play


    - name: Install packages
      apt:
        name: "{{ item }}"
        state: present
        force: yes
        update_cache: yes
      environment:
        DEBIAN_FRONTEND: noninteractive
      with_items:
        - nfs-kernel-server
      when: ansible_hostname is search("docker0")

    - name: Create mounts
      file:
        path: "{{ item }}"
        state: directory
        mode: 0777
      with_items:
        - "/storage/pods/cc/cmon.d"
        - "/storage/pods/cc/datadir"
        - "/storage/pods/cc/backups"
        - "/storage/pods/cc/ssh"

    - name: Configure NFS exports
      lineinfile:
        dest=/etc/exports
        regexp="/storage/pods/cc/cmon.d docker1\(rw,sync,no_subtree_check,no_root_squash\) docker2\(rw,sync,no_subtree_check,no_root_squash\)"
        line="/storage/pods/cc/cmon.d docker1(rw,sync,no_subtree_check,no_root_squash) docker2(rw,sync,no_subtree_check,no_root_squash)"
      when: ansible_hostname is search("docker0")
      register: nfs

    - name: Configure NFS exports
      lineinfile:
        dest=/etc/exports
        regexp="/storage/pods/cc/datadir docker1\(rw,sync,no_subtree_check,no_root_squash\) docker2\(rw,sync,no_subtree_check,no_root_squash\)"
        line="/storage/pods/cc/datadir docker1(rw,sync,no_subtree_check,no_root_squash) docker2(rw,sync,no_subtree_check,no_root_squash)"
      when: ansible_hostname is search("docker0")

    - name: Configure NFS exports
      lineinfile:
        dest=/etc/exports
        regexp="/storage/pods/cc/backups docker1\(rw,sync,no_subtree_check,no_root_squash\) docker2\(rw,sync,no_subtree_check,no_root_squash\)"
        line="/storage/pods/cc/backups docker1(rw,sync,no_subtree_check,no_root_squash) docker2(rw,sync,no_subtree_check,no_root_squash)"
      when: ansible_hostname is search("docker0")

    - name: Configure NFS exports
      lineinfile:
        dest=/etc/exports
        regexp="/storage/pods/cc/ssh docker1\(rw,sync,no_subtree_check,no_root_squash\) docker2\(rw,sync,no_subtree_check,no_root_squash\)"
        line="/storage/pods/cc/ssh docker1(rw,sync,no_subtree_check,no_root_squash) docker2(rw,sync,no_subtree_check,no_root_squash)"
      when: ansible_hostname is search("docker0")

    - name: Restart nfs-server
      service:
        name: nfs-server
        state: restarted
      when: ansible_hostname is search("docker0") and nfs.changed

    - name: Init k8s
      shell: "kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address={{ ansible_eth1.ipv4.address }}"
      register: results
      when: ansible_hostname is search("docker0") and nfs.changed


    - set_fact:
        output: "{{ results.stdout | string | regex_search('(kubeadm join.*)') }}"
      when: ansible_hostname is search("docker0") and nfs.changed

    - debug:
        var: output
      when: ansible_hostname is search("docker0") and nfs.changed


    - name: run k8s post-init stuff
      shell: "{{ item }}"
      with_items:
      - "mkdir -p $HOME/.kube"
      - "sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config"
      - "sudo chown $(id -u):$(id -g) $HOME/.kube/config"
      when: ansible_hostname is search("docker0") and nfs.changed

    - name: Install weave
      shell: "kubectl apply -f \"https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')\""
      when: ansible_hostname is search("docker0") and nfs.changed

    - debug:
      msg: "{{ hostvars['docker0']['output'] }}"
      when: ansible_hostname is search("docker0") and results.changed

    - debug:
      msg: "{{ hostvars['docker0']['output'] }}"
      when: ansible_hostname is search("docker1") and results.changed

    - name: Init k8s on slaves
      shell: "{{ hostvars['docker0']['output'] }}"
      when: ansible_hostname is search("docker1") and results.changed

    - name: Init k8s on slaves
      shell: "{{ hostvars['docker0']['output'] }}"
      when: ansible_hostname is search("docker2") and results.changed

    - name: Create cc-pv-pvc.yml from template
      template:
        src: cc-pv-pvc.yml.j2
        dest: /tmp/cc-pv-pvc.yml
        mode: 0644
      when: ansible_hostname is search("docker0") and results.changed

    - name: Run cc-pv-pvc.yml
      shell: "kubectl create -f /tmp/cc-pv-pvc.yml"
      when: ansible_hostname is search("docker0") and results.changed

    - name: Download cc-rs.yml
      get_url:
        url: https://raw.githubusercontent.com/severalnines/docker/master/examples/kubernetes/cc-rs.yml
        dest: /tmp/cc-rs.yml
        mode: 0644
      when: ansible_hostname is search("docker0") and results.changed

    - name: Run cc-rs.yml
      shell: "kubectl create -f /tmp/cc-rs.yml"
      when: ansible_hostname is search("docker0") and results.changed

    - name: Clone Severalnines/docker repo
      git:
        repo: https://github.com/severalnines/docker.git
        dest: /root/docker
      when: ansible_hostname is search("docker0")
